=head1 Day 10 - The Chained Dispatch Type

A complete example of how to use L<Catalyst::DispatchType::Chained>.

=head2  A basic introduction to Chained actions with Catalyst.

Frequently when building web applications there is a chain of
dependency along the url path.  That is, the controller dispatch logic
has a close relationship to the data you want to draw from the model.
Chained dispatch types provide an easy way to encapsulate this logic
within your Catalyst controllers.

This Advent calendar entry is associated with a complete example
application which shows how to use chained actions to provide this
logic.  The example application is available from the Catalyst
subversion repository by issuing the following command:

 $ svn co http://dev.catalyst.perl.org/repos/Catalyst/trunk/examples/ChainedEg

Please get a copy of this code before you proceed.  The application is
a very simple proof-of-concept application which will work with a
basic L<Catalyst|Catalyst::Runtime>.  There is no model, and the view
is handled in the Root controller's end action
(i.e. C<< Controller::Root->end >>).

As an interesting aside, with appropriate introspection, by using
L<Class::Inspector> for example, it would be relatively straightforward
to develop a custom view based on this end action to provide skeleton
output during application development.  For instance, you might want
to use this in a situation where you have a pre-existing model but are
not yet able to provide data for it.

=head2 The C<LoadModel> base controller

The package L<MyAdvApp::ControllerBase::LoadModel>

=head2 Getting started.

Before we look at our application in any detail, first, let's run the
example application.  Check out the code as shown above, and then
issue the following command from the application root:

 $ perl script/myadvapp_server.pl
 [ snipped the early part of the output ]
 [debug] Loaded Chained actions:
 .-------------------------------------+--------------------------------------.
 | Path Spec                           | Private                              |
 +-------------------------------------+--------------------------------------+
 |                                     | /app_root                            |
 | /*/bar                              | /language (1)                        |
 |                                     | -> /bar/base (0)                     |
 |                                     | -> /bar/resultset (0)                |
 |                                     | => /bar/list                         |
 | /*/bar/*/something                  | /language (1)                        |
 |                                     | -> /bar/base (0)                     |
 |                                     | -> /bar/load_model (1)               |
 |                                     | => /bar/something                    |
 | /*/foo/*/edit                       | /language (1)                        |
 |                                     | -> /foo/base (0)                     |
 |                                     | -> /foo/load_model (1)               |
 |                                     | => /foo/edit_foo                     |
 | /*/foo                              | /language (1)                        |
 |                                     | -> /foo/base (0)                     |
 |                                     | -> /foo/resultset (0)                |
 |                                     | => /foo/list                         |
 | /*/foo/*                            | /language (1)                        |
 |                                     | -> /foo/base (0)                     |
 |                                     | -> /foo/load_model (1)               |
 |                                     | => /foo/show_foo                     |
 '-------------------------------------+--------------------------------------'
 
 [info] MyAdvApp powered by Catalyst 5.7005
 You can connect to your server at http://localhost:3000

Looking at the debug output from the application above, we see that it
is a little different from a standard Catalyst application. The Chained
dispatch type alters the usual behavior of the arguments and dispatch
chain.

=head2 Visiting the application root

L<http://localhost:3000> displays a message and a collection of URLs
which the application accesses.  This page is in itself a Chained
action.  By the end of this article, hopefully you will understand the
equivalent Chained code that provides the eqivalent of a C< index :
Private > action for the root controller action.  Let's visit the
first link on that page.

=head2 L<http://localhost:3000/en/foo>

This produces the following output:

 $VAR1 = {
           'language' => 'en',
           'list' => 'Showing a list from the Resultset',
           'resultset' => 'Foo called with no trailing arguments'
         };

If we change the url slightly to L<http://localhost:3000/de/foo> the
first line of output changes subtly:

 'language' => 'de'
         
The line of code responsible for doing this in the C<Foo> Controller
is this:

 sub base : Chained('/language') PathPart('foo') CaptureArgs(0) { }

which is an empty subroutine.  What's happening here?

Well, the attribute C<Chained('/language')> is telling the C<Foo>
controller to use the root (C</>) controller's private method
C<language> first.  Following this, if the next part of the url path
is C<foo> (C<PathPart('foo')>) then pass all remaining arguments to
the current controller class (C<Controller::Foo>) for further
processing.  In this case, two further subroutines are called from
this controller.  The first is within the file C<lib/Controller/Foo>:
C<resultset>, which populates C<< $c->stash->resultset >> with the text
'Foo called with no trailing arguments'.

The second subroutine is one inherited from
C<MyAdvApp::ControllerBase::LoadModel> which provides the C<list>
method under the same circumstances as the C<resultset> sub in
C<Controller::Foo>.  So both actions are called, and both actions
populate C<< $c->stash >>.  Look at the subroutine declaration for the
C<resultset> and C<list> subroutines:

 sub resultset : Chained('base')      PathPart('') CaptureArgs(0) {
 sub list      : Chained('resultset') PathPart('') Args       (0) {

Note the difference in the declaration.  C<list> uses the C<Args>
attribute, whereas C<resultset> uses the C<CaptureArgs> attribute.
What's the difference?

C<CaptureArgs> indicates that this is not an endpoint, and the
dispatcher should look for more subroutines to run before
proceeding to the appropriate C<end> action (which usually renders the
view).  So this means when we visit L<http://localhost:3000/en/foo>
the C<resultset> action is called, and does not capture any
arguments into C<< $c->request->captures >> (this will make more sense
in the next section).

On the other hand, the C<list> declaration has C<Args> as an attribute.
This means that it I<is> an endpoint, and after the subroutine is
executed, the appropriate C<end> action is called.  Note that the
expected number of arguments (in this case none) are put into
C<< $c->request->args >> by the Catalyst dispatcher.

The result of this code is that when we call our application from its
base path with the additional path C</en/foo/> we can easily provide
localisation via the C<language> subroutine in C<Controller::Root>
and when nothing is in the path after the name of the controller, we
execute the C<list> method.

=head2 We've done "list", what about showing a single item?

Visiting L<http://localhost:3000/en/foo/23> takes us to the following
display:

 $VAR1 = {
          'language' => 'en',
          'loaded_model' => 'DBIC::Foo',
          'loaded_item_id' => '23',
          'message' => 'Showing a Foo'
        };

Replace "23" with "something%20else" and we get:

 [other output snipped]
 'loaded_item_id' => 'something else',

The L<ControllerBase> package, which is a base class for
L<Controller::Foo> (C<use base 'MyAdvApp::ControllerBase::LoadModel'>)
provides the following method to handle this:

 sub load_model : Chained('base') PathPart('') CaptureArgs(1) {
     my ($self, $c, $item_id) = @_;
     $c->stash->{loaded_item_id} = $item_id;
     $c->stash->{loaded_model}   = $self->config->{model};
 }

It takes one argument for internal use by the controller (placed into
the variable C<$item_id> in the first line of the sub) and uses this to
populate the stash. No additional PathPart is added before the argument
(if we added one, say 'bar', it would match /en/foo/bar/23 instead of
/en/foo/23).

The code responsible for the 'message' portion of the data structure
is in the L<Controller:Foo> package:

 sub show_foo : Chained('load_model') PathPart('') Args(0) {
     my ($self, $c) = @_;
     $c->stash->{message} = 'Showing a Foo';
 }

which is the end point, as we can see by the use of C<Args> rather than
C<CaptureArgs>.

The edit action is somewhat similar.  By this point you can see that
there is a pattern developing. The C<edit_foo> endpoint is called from
C<Controller::Foo> after the C<load_model> subroutine from the base
controller class (code above).

 sub edit_foo : Chained('load_model') PathPart('edit') Args(0) {
     my ($self, $c) = @_;
     $c->stash->{message} = 'Editing a Foo';
 }

=head2 The C<Bar> Controller and Going Further.

Working this out is left as an exercise to the reader.  Examine the
example code and ensure that you understand how the same base
controller is being used to provide results for a different package.

As we mentioned in the beginning of this discussion, the C<end> action
used in this module is a "proof of concept" view, and is mainly for
illustrative purposes.  A useful exercise to understand the Chained
dispatch type would be to use the database model presented in
L<DBIx::Class::Manual::Example> and the L<Template> Toolkit to flesh
out the application presented here into a working, database-driven
example.  You would put the C<MyDatabase> directory in your
application's C<lib> directory (or anywhere else in C<@INC>).
Assuming that you put the SQLite database C<example.db> in the
application root you could create the Catalyst model via calling a
helper in the following way:

 $ script/myadvapp_create.pl model MyCatalystModel DBIC::Schema MyDatabase dbi:SQLite:example.db

From there it's up to you.

=head2 Wrap Up

That's it.  Simple use of the Chained dispatch type.  See the
C<Catalyst::DispatchType::Chained> documentation for more details.  As
someone said on the mailing list (I'm paraphrasing here), "Chained is
a bit challenging to get your head around initially, but it's well
worth doing so.  It's like built-in information architecture."

=head3 AUTHORS

Words:  Kieren Diment C<< <diment@gmail.com> >>
Code:   Robert 'phaylon' Sedlacek C<< <rs@474.at> >>


=head3 COPYRIGHT

Copyright 2006 Robert Sedlacek.  This document can be modified and
re-distributed under the same conditions as Perl itself.
