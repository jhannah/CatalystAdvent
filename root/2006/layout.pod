=head1 Day X

Layout of a Catalyst Application

=head2 The Makefile.PL

  Location: YourApp/Makefile.PL

It might not look important, but you should never remove this file
from your applications base directory. Catalyst needs it to auto-find
it's root. Besides for this reason, it is the key to build a 
distribution, a PAR package or just to simply collect your
applications dependencies. Catalyst uses C<Module-Install> for
Makefile and installation handling. If you'd like to add, for example,
a dependency on C<DBIx-Class>' current version, you'd add

  requires 'DBIx::Class' => '0.07003';

to it. This will alert you of a missing module or wrong version by
simply running the Makefile.PL through perl.

=head2 The Tests

  Location: YourApp/t

This is the location to put your application's tests into. CPAN has
a rich set of library to assist you in creating live and unit tests:

  Dists put here by people who know better than me.

Usually, Perl tests have the format C<00-name.t>, where the C<00> is
a number that shows the order of the tests, and C<name> being the
topic of the test file. You're not forced to do it this way, of
course. Personally, I sometimes use three digits instead of two, the
first being an indicator on what will be tested. As an example:

  203-schema_category.t

Where the C<2> prefixes all tests for my DBIx-Class schema classes,
and the C<03> being the running number showing their order. You can
use many ways and tools to run your tests. The widely known approach
would be through your applications Makefile:

  perl Makefile.PL      # This creates the Makefile and test for
                        # your applications dependencies, if you
                        # specified them in it.
  make                  # Prepares your application for the other
                        # uses of 'make'. For example 'make install'
  make test             # Runs your distributions test suite.

You don't need to do all of that to run your tests, of course.
Especially during development, you can simply run your test suite
by using C<prove>:

  prove -l t/*.t

As you might see, this allows a far more fine grained control on
what parts of the test suites to run. Taking the example from above,
This would run the schema test files:

  prove -l t/2*.t

The C<prove> command line utility is part of the C<Test-Harness>
distribution, which you should find shipped with your Perl 5
distribution. You might want to read up it's manpage for all of it's
possibilities.

But let's say you want details on one single test file. Nothings
easier than that, since every C<.t> file is just a perl script:

  perl -Ilib t/203-schema_category.t

Will show you details on every test in the file. If you have taken
out the C<-Debug> flag of your application, but want to see its
debug output during this run, use the C<CATALYST_DEBUG> environment
variable:

  CATALYST_DEBUG=1 perl -Ilib t/203-schema_category.t

=head2 The root

  Location: YourApp/root

This is the place for your non-perl files. By default, you will get
some nice graphics and logos shipped with Catalyst. But it's usually
also the place for all other static files, and also your applications
templates. Due to Catalysts advanced configurability, the layout of
this directory can be changed completely to fit your needs.

=head2 The Configuration File

  Location: YourApp/yourapp.yml

By default, C<catalyst.pl> will create a C<YAML> configuration file
for you. But you're not limited to that. At the time of writing this
article, C<Catalyst-Plugin-ConfigLoader> supports YAML, JSON,
XML, INI and Perl config files. Your configuration file gives you
control over any of your components C<config> options. For example,
let's assume you created a TT view named C<YourApp::View::TT>. This
would set C<.html> as the default template extension:

  # yourapp.yml
  # ...
  View::TT:
      TEMPLATE_EXTENSION: ".html"

=head2 The Perl Modules

  Location: YourApp/lib

This is were the code of your application actually lives. After
creating a new Catalyst project, you will have this initial setup of
Perl modules:

=head3 The Application Class

  Location: YourApp/lib/YourApp.pm

This is were you specify which plugins to load, and where you can
implement methods which will be available through your context object
(C<$c>, as it's usually called). Note however, that it is recommended
to use controller base classes if you don't need to affect or act upon
Catalyts request or startup lifecycles.

=head3 The MVC Directories

  Locations: YourApp/lib/YourApp/Controller
             YourApp/lib/YourApp/Model
             YourApp/lib/YourApp/View

Catalyst follows the MVC principle, and therefore these directories are
provided by default, as most people will need them. Nothing hinders you
to put other modules for your applicaton in there as well. For example
a C<YourApp/Schema/*> or a C<YourApp/Base/Controller>.

=head3 The Root Controller

  Location: YourApp/lib/Controller/Root.pm

Most application will want to do something when your root index (C</>)
is requested. The place for those actions is the root controller.
Typical examples are a default handler for 404 pages

  sub default : Private {
    my ($self, $c) = @_;
    $c->response->body("404 - File Not Found");
    $c->response->status(404);
  }

and the forementioned index action:

  sub index : Private {
    my ($self, $c) = @_;
    # ...
    # code for application root
    # ...
  }

If you would like to have a language prefix for your application, you
might want to put a Chained action in there to tie your other actions
on to.

=head2 The Scripts

  Location: YourApp/script

These are used to run your application. But note that there are other
ways too, depending on the Catalyst engine you want to use. There are,
for example, mod_perl and POE engines which don't need a script to run.

=head3 The Creation Helper Script

This is simply used to create new components in your application, if 
they provide helpers. You might want to look up their documentation to
find out if they do, and what arguments they take. Here are some examples:

  script/yourapp_create.pl controller Foo::Bar

creates a C<YourApp::Controller::Foo::Bar> module in 
C<lib/YourApp/Controller/Foo/Bar.pm>. Another common thing might be a
view:

  script/yourapp_create.pl view TT TT

for a C<YourApp::View::TT>.

=head3 The Development Server

During your applications development phase, it is not needed to actually
deploy your application to mod_perl, FastCGI or something else to test it.
This is thanks to Catalyst being engine agnostic. The line

  script/yourapp_server.pl -d -p 2050 -r

Would run your application in debugging mode with proper output (C<-d>)
on port 2050 (C<-p 2050>) and restart if one of your components changes
(C<-r>).

=head3 Running a Test Request

This simple script does nothing more than start up your app, make a 
request, and print it's body to STDOUT. For example:

  script/yourapp_test.pl /foo/bar

would show you the output of the C</foo/bar> action.

=head3 The Engine Scripts

And then there are C<yourapp_cgi.pl> and C<yourapp_fastcgi.pl>. These
are for use of Catalyst within persistant environments like C<pperl>, 
C<SpeedyCGI> or C<FastCGI>.

=head2 Wrap up.

TODO

=head3 AUTHOR

Robert 'phaylon' Sedlacek C<E<lt>rs@474.atE<gt>>

=head3 COPYRIGHT.

Copyright 2006 Robert Sedlacek.  This document can be freely
redistributed and can be modified and re-distributed under the same
conditions as Perl itself.

