=head1 Catalyst Advent - Job Queue

Running a job queue

=head2 What's a job queue?

A Job Queue helps you to run some code at a fixed time interval (like C<cron> does on Unix, C<launchd> on Mac OS X and "Scheduled Tasks" on Windows). The job is run as a HTTP request, so you can reuse you Catalyst application code.

=head2 Get Started

Check out the L<Catalyst::Engine::JobQueue::POE> source into a work directory:

  $ svn co http://dev.catalyst.perl.org/repos/Catalyst/trunk/Catalyst-Engine-JobQueue-POE

Build and install the engine:

  $ cd Catalyst-Engine-JobQueue-POE
  $ perl Makefile.PL
  $ make test 
  $ sudo make install

You can now use the job queue in your application.

=head2 Setup and Configure a JobQueue

Generate a new Catalyst application in another directory:

  $ catalyst.pl JobQueueApp
  <...lots of "created" messages>
  $ cd JobQueueApp
  $ script/jobqueueapp_create.pl JobQueue::POE
  <... a few "created" messages>
  
Now you have all you need to run the job queue, let's configure it. Add the
following configuration values to your F<jobqueueapp.yml> configuration file:

  Catalyst::Engine::JobQueue::POE:
    render: 
      to: [log]

This will make the job queue render the job responses to the application log.

=head2 Create your first job

It's time to create a job. Edit the F<crontab> file and uncomment the last
line (the one with the many "*"). Each uncommented line represents a job. The
first 6 elements will determine how often your job will be run (it's in
crontab syntax,
L<http://www.adminschoice.com/docs/crontab.htm#Crontab file>). The next one
is unused for now, so you can ignore it. The last one represents the request
that the job will send to your application. It's an URL. Your job looks like
this:

  *   *   *   *   *   *   root   /test/job

This means that each minute the job queue will make a request for C</test/job>

=head2 Run the JobQueue

You can now run the job queue with:
  
  $ perl script/jobqueueapp_jobqueue.pl

You should see a typical Catalyst debug output. Now wait until the full
minute. You'll get to see some more debug info (indication a request is being
processed) and the HTML source of the default Catalyst welcome page. It's the same 
output your browser would receive if you'd start the Catalyst web server and
point it at your server and the C</test/job> URL.

=head2 Getting mail

It's time to get some results by email. In the F<jobqueueapp.yml>
configuration file, change C<log> to C<email> and add these lines underneath:

    email:
      from: catalyst@myserver.com
      to: user@myserver.com

Pay attention to the YAML alignment (C<email> should be vertically aligned
with C<to: [log]>).  Put your email address on the C<to> line and some address
you wish to see the mail report coming from on the C<from> line. I<IMPORTANT>
For this feature, your development server should be able to send emails, if
not add a line like this to your config:
     
      smtp: mail.myserver.com

Again C<smtp> should be vertically aligned with C<to: user@myserver.com>. Put
your SMTP server on this line.

Re-run the job queue. This time, you shoudl receive an email with the default
Catalyst page shortly after the full minute). Don't forget to stop the job
queue or else your inbox might fill pretty quick.

=head2 Write a useful job 

Now let's actually do something useful with the job. We'll setup a controller
which will tell us the system load. The URL for this info will be
C</system/load>.

First create the controller:

  $ script/jobqueueapp_create.pl controller System
  <... some "created"/"exists" messages>

Then edit F<lib/JobQueueApp/Controller/System.pm> and add this
code: 

  sub load : Local {
    my ( $self, $c ) = @_;
    my @output = `w`;
    $c->response->body("Load: $output[0]");
  }

I<IMPORTANT> This will work only if you have access to the C<w> command line
application. Under Windows or in restricted environment you might get any
information.

Now edit your F<crontab> file so that the line you uncommented earlier looks
like this:

  */5   *   *   *   *   *   root   /system/load

and in your application configuration file change the C<to: [email]> line to
C<to: [log, email]>.

Now start the job queue and every 5 minutes the uptime, user count and load
averages will be logged as well as sent to you by mail.

=head2 Summary

As you have seen you can setup the job queue to run any action from your
controllers and have the results logged and/or mailed to you.

Keep in mind though that the engine is not yet production quality and not
recommended for running critical jobs.

=head3 AUTHOR

Gruen Christian-Rolf (kixx) <kiki@bsdro.org>

=head3 COPYRIGHT.

Copyright 2006 Grün Christian-Rolf.  This document can be freely
redistributed and can be modified and re-distributed under the same
conditions as Perl itself.

=cut 
