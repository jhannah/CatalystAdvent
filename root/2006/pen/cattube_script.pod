=head1 Day Someday

This is a screencast to demonstrate how to setup a Catalyst application and use
a ready-made Model

=head2 Video

The video is available at L<http://www.toeat.com/3rdparty/CatTube_Screencast.mov>

=head2 The Script

This screencast demonstrates how to quickly setup a Catalyst
application, use the helpers available to create a model class and
build a simple AJAX-based YouTube search application.

The first step is to use the Catalyst script to create your new
application.  We'll call this application "CatTube", so we just run
"catalyst.pl CatTube" and it will bootstrap our application.  Once
this completes, we'll have a basic framework that we can then extend
to suit our needs.

The important paths here is "script" which contains all the Catalyst
generated application scripts, along with the test server, and the
"root" directory which contains all templates and other static files.
The MVC components are initiated by using the "cattube_create.pl"
script that is generated and custom tailored for your application.

Lets begin by installing a few extensions, up first is the YouTube
Model class that is available from CPAN.  To use this module, first
make sure you have it installed by running "cpan install
Catalyst::Model::YouTube".  Once that is complete, use the Catalyst
helper functions to get the Model class installed in the application.
We do this by running "script/cattube_create.pl model CatTube YouTube
dev-id".  The "YouTube" in that command line tells Catalyst to
construct a model class based upon Catalyst::Model::YouTube, and then
it properly configures that model based upon the dev-id that is also
provided as a command line option.

Also, we'd like to have some fancy graphics included in our
application, like the Catalyst AJAX activity indicator, so lets
install that with "cattube_create.pl Graphics".

Once these packages are installed, we can begin with our application.
First, we have to define any plugins we may want, and in this case
we'll use the prototype.js plugin.

Next, we'll need to create a controller action for our default page
load.  Catalyst will populate some defaults for us, so after we do
this we only need to create our base template.

After the base template and CSS is created, we then want to create our
Search controller.  This is accomplished by once again using the
cattube_create.pl script.

After the Controller class is created, we go ahead and put our search
logic in there to query the YouTube model.  We're sending the results
back via AJAX, and doing a partial render on the results page so our
template is pretty simple.

We trigger this now by going back to our index.tt template and
configuring the JavaScript and away we go.

And look at that, a quick way to search and frame YouTube videos in
your own application!  I hope you enjoyed this screencast, and enjoy
using Catalyst.

=head2 NOTES

I'm having a significant amount of difficulty with any video editing software.
If anybody can assist, please let me know (jshirley on irc)

