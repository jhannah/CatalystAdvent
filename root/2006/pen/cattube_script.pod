=head1 Day Someday

This is a screencast to demonstrate how to setup a Catalyst application and use
a ready-made Model

=head2 Video

The video is available at L<http://www.toeat.com/3rdparty/CatTube_Screencast.mov>

=head2 The Script

This screencast demonstrates how to quickly setup a Catalyst
application, use the helpers available to create a model class and
build a simple AJAX-based YouTube search application.

Lets begin by installing a few extensions, for this application we're going
to be using the YouTube Model, the Template Toolkit View, and the Graphics
helper package.

    cpan Catalyst::Helper::Graphics Catalyst::Model::YouTube Catalyst

The first step is to use the Catalyst script to create your new
application.  We'll call this application "CatTube", so we just run
"catalyst.pl CatTube" and it will bootstrap our application.  Once
this completes, we'll have a basic framework that we can then extend
to suit our needs.

The important paths here is "script" which contains all the Catalyst
generated application scripts, along with the test server, and the
"root" directory which contains all templates and other static files.
The MVC components are initiated by using the "cattube_create.pl"
script that is generated and custom tailored for your application.

Once you have your application you can start the development server to see
that everything is setup and running.  Lets do this now.

    script/cattube_server.pl

Also, we'd like to have some fancy graphics included in our
application, like the Catalyst AJAX activity indicator, so lets
install that with:
    
    script/cattube_create.pl Graphics

And we'll need to make sure we have the Template Toolkit view, so we'll run

    script/cattube_create view TT TT

Once that is complete, use can use the Catalyst helper functions to get
the Model class installed in the application.  We do this by running

    script/cattube_create.pl model YouTube YouTube <dev-id>

The second "YouTube" in that command line tells Catalyst to
construct a model class based upon Catalyst::Model::YouTube, and then
it properly configures that model based upon the dev-id that is also
provided as a command line option.

Once these packages are installed, we can begin with our application.

First, we have to define any plugins we may want, and in this case
we'll be using the prototype.js plugin.

Next, we'll need to create a controller action for our default page
load.  Catalyst will populate some defaults for us, so after we add our index
action we'll just need to create the template to correspond with it.  Catalyst
will, by default, match the template name with the action.

    sub index : Private {

    }

In this case, we just will create an "index.tt" file in our root directory.
This is effectively an HTML page, that Template Toolkit will take in and perform
whatever operations, like variable substitution and other simple programmatic
constructs in it.  Of special note is the C<c> variable, which is our Catalyst
context object.  This helps us create paths, use plugins, and do a few other
things that I'm sure you'll learn about.

We're using the prototype plugin to define a search form that will connect
to a soon to be created Search controller.  This is a convenience method that
will simply generate the form tag, along with some JavaScript.

The C<c.uri_for> is a great function that helps construct the final URI,
without having to worry about hostnames or other environment information
outside of the application.

=head2 This part can be sped up.  Painfully slow.

After the base template and CSS is created, we then want to create our
Search controller.  This is accomplished by once again using the
cattube_create.pl script.

    script/cattube_create.pl controller Search

After the Controller class is created, we go ahead and put our search
logic in there to query the YouTube model.  We're sending the results
back via AJAX, and doing a partial render on the results page so our
template is pretty simple.

We trigger this now by going back to our index.tt template and
configuring the JavaScript and away we go.

After some quick debugging, we have a nice way to search and embed YouTube
videos in our application!  I hope you enjoyed this screencast, and enjoy
using Catalyst.

=head2 NOTES

I'm having a significant amount of difficulty with any video editing software.
If anybody can assist, please let me know (jshirley on irc)

