=head1 Catalyst Advent - Day X

Tidying up controllers with BindLex

=head2 The Problem

If you've done any development with Catalyst, you are almost guaranteed
to need to put data in the stash. This isn't so much of a problem, but
it can make the code appear... unwieldy If you are using chained 
actions you will likely want to pull things out of the stash from 
previous actions. 

Consider the following example code. (If you don't know
how chained actions work, when a URL such as C</groups/5> is visited, 
C<load_group> is called first, and then C<members> is called next.)

 package MyApp::C::Groups;
 
 use base 'Catalyst::Controller';

 sub load_group : Chained('/')
                  PathPart('groups') 
                  CaptureArgs(1) {
   my ($self, $c, $gid) = @_;
  
   # Load group from Model
   my $group = $c->model('DBIC::Group')->find($gid);
   
   $c->stash->{group} = $group;
 }
 
 sub members : Chained('load_group')
 						   PathPart('')
 						   Args(0) {
   my ($self, $c) = @_;
   
   my $group = $c->stash->{group};
   $c->stash->{members} = { %{ $group->members } };
 }
 
Although the above example is (slightly) contrived, it illustrates the 
problem - all the instances of C<< $c->stash->{ >> make the code messier
than it needs to be.

=head2 The Solution

Luckily L<Catalyst::Controller::BindLex|BindLex> comes to the rescue! 
It enables us do the following:

 package MyApp::C::Groups;
 
 # NOTE: New base class
 use base 'Catalyst::Controller::BindLex'; 

 sub load_group :Chained('/')
                 PathPart('groups') 
                 CaptureArgs(1) {
   my ($self, $c, $gid) = @_;
   
   # Load group from Model
   my $group : Stashed = $c->model('DBIC::Group')->find($gid);
 }
 
 sub members :Chained('load_group')
 						  PathPart('')
 						  Args(0) {
   my ($self, $c) = @_;
   
   my $group :Stashed;
   # Works with hashes too - this will DWYM
   my %members :Stashed = %{ $group->members };
 }
 
That's right! You give a lexical variable (i.e. C<my $var>) an attribute
of C<Stashed> (or C<Stash>), and it will automatically be in the stash.
And whenever you update the value of said lexical, it updates the value
in the stash.

BindLex also provides C<Session>, C<Sessioned>, C<Flash> and C<Flashed>
attributes to use lexicals in C<< $c->session >> or C<< $c->flash >> 
respectively.

However some people view this module as a "Bad Thing" due to the 
modules it uses, namely L<PadWalker>, L<Array::RefElem>, 
L<Devel::Caller>, L<Devel::LexAlias> and L<attributes>. Personnaly I've
not had any problems with it.

=head3 AUTHOR

Ash Berlin <ash@cpan.org>

=head3 COPYRIGHT

Copyright 2006 Ash Berlin.  This document can be freely
redistributed and can be modified and re-distributed under the same
conditions as Perl itself.

=cut 

# Might want to not use chained as example, just use a forward/detach
instead
